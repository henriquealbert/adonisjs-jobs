{{{
  exports({
    to: app.makePath('app/jobs', 'example_job.ts')
  })
}}}
import { Dispatchable } from '@hschmaiske/jobs'
import { inject } from '@adonisjs/core'
import Logger from '@adonisjs/core/services/logger'

export interface ExampleJobPayload {
  userId: string
  email: string
}

@inject()
export default class ExampleJob extends Dispatchable {
  // Optional: Specify custom queue (autocomplete enabled if declared in config)
  // If not specified, uses defaultQueue from config (default: 'default')
  // static queue = 'emails'
  
  // Optional: Override auto-generated job name (default: 'example')
  // static jobName = 'custom-job-name'
  
  // Optional: All pg-boss work options in one object
  // static workOptions = {
  //   batchSize: 10,        // Process jobs in batches
  //   teamSize: 5,          // Worker concurrency  
  //   priority: 10,         // Higher = more important
  //   retryLimit: 5,        // Max retry attempts
  //   retryDelay: 60,       // Seconds between retries
  //   expireInHours: 2,     // Job expiration
  // }

  constructor(private logger: Logger) {
    super()
  }
  
  async handle(payload: ExampleJobPayload) {
    // Implement your job logic here
    this.logger.info('Processing example job', { userId: payload.userId })
    
    // Example: Send email
    // await this.emailService.sendWelcomeEmail(payload.email)
    
    // Return success (job will be marked as completed)
    // Throw an error to mark job as failed and trigger retry
  }
}