{{{
  exports({
    to: app.makePath('app/cron', 'example_cron.ts')
  })
}}}
import { Schedulable } from '@hschmaiske/jobs'
import { inject } from '@adonisjs/core'
import Logger from '@adonisjs/core/services/logger'

@inject()
export default class ExampleCron extends Schedulable {
  // Required: Cron schedule (this job will auto-schedule on startup)
  static readonly schedule = '0 2 * * *'  // Daily at 2 AM - customize as needed
  
  // Optional: Specify custom queue (autocomplete enabled if declared in config)
  // If not specified, uses defaultQueue from config (default: 'default')
  // static queue = 'maintenance'
  
  // Optional: Override auto-generated job name (default: 'example')
  // static jobName = 'daily-cleanup'
  
  // Optional: All pg-boss schedule options in one object
  // static scheduleOptions = {
  //   singletonKey: 'daily-cleanup',
  //   singletonSeconds: 3600,  // Lock for 1 hour
  //   priority: 5,             // Lower priority than user actions
  //   retryLimit: 2,           // Fewer retries for cron jobs
  // }

  constructor(private logger: Logger) {
    super()
  }
  
  async handle() {
    // Implement your cron job logic here (no payload for scheduled jobs)
    this.logger.info('Running daily cleanup cron job')
    
    // Example: Perform scheduled maintenance
    // await this.cleanupExpiredTokens()
    // await this.generateDailyReports()
    // await this.optimizeDatabaseIndexes()

    this.logger.info('Daily cleanup cron job completed')
    
    // Return success (job will be marked as completed)
    // Throw an error to mark job as failed and trigger retry
  }
}

/**
 * This cron job will be automatically registered and scheduled on application startup.
 * No manual registration needed!
 * 
 * Cron syntax examples:
 * - '0 2 * * *'     = Daily at 2 AM
 * - '0 8 * * 1'     = Weekly on Monday at 8 AM  
 * - '*/15 * * * *'  = Every 15 minutes
 * - '0 0 1 * *'     = Monthly on the 1st at midnight
 */